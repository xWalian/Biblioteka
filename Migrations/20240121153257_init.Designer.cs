// <auto-generated />
using System;
using Biblioteka.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Biblioteka.Migrations
{
    [DbContext(typeof(BibliotekaDbContext))]
    [Migration("20240121153257_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Biblioteka.Models.Ksiazka", b =>
                {
                    b.Property<int>("id_ksiazka")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_ksiazka"));

                    b.Property<string>("autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("id_kategoria")
                        .HasColumnType("int");

                    b.Property<int>("ilosc")
                        .HasColumnType("int");

                    b.Property<int>("rok_wydania")
                        .HasColumnType("int");

                    b.Property<string>("tytul")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("wydawnictwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("id_ksiazka");

                    b.ToTable("Ksiazki");
                });

            modelBuilder.Entity("Biblioteka.Models.Uzytkownik", b =>
                {
                    b.Property<int>("id_uzytkownik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_uzytkownik"));

                    b.Property<DateTime>("data_urodzenia")
                        .HasColumnType("date");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("imie")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("miasto")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("nazwisko")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("rodzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("id_uzytkownik");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("Biblioteka.Models.Wypozyczenia", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data_wypozyczenia")
                        .HasColumnType("date");

                    b.Property<int>("id_ksiazka")
                        .HasColumnType("int");

                    b.Property<int>("id_uzytkownik")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Wypozyczenia");
                });
#pragma warning restore 612, 618
        }
    }
}
